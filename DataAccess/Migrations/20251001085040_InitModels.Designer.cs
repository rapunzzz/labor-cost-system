// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20251001085040_InitModels")]
    partial class InitModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ProductionPlanning.Models.LineConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LineConfigurations");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ModelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ModelReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModelReferenceId");

                    b.ToTable("ModelDatas");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ModelReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("SUT")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ModelReferences");
                });

            modelBuilder.Entity("ProductionPlanning.Models.OptimizedLineCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LineConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RequiredWorkers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LineConfigurationId");

                    b.ToTable("OptimizedLineCapacities");
                });

            modelBuilder.Entity("ProductionPlanning.Models.OvertimeProductionAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualAllocatedWorkers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ChangeoverHours")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelDataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("PlannedHours")
                        .HasColumnType("REAL");

                    b.Property<int>("RequiredWorkers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SurplusWorkers")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ModelDataId");

                    b.ToTable("OvertimeProductionAssignments");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ProductionAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualAllocatedWorkers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedShift")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ChangeoverHours")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelDataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("PlannedHours")
                        .HasColumnType("REAL");

                    b.Property<int>("RequiredWorkers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SurplusWorkers")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ModelDataId");

                    b.ToTable("ProductionAssignments");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ShiftWorkConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ShiftWorkConfigurations");
                });

            modelBuilder.Entity("ProductionPlanning.Models.WorkTimeDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftWorkConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ShiftWorkConfigurationId");

                    b.ToTable("WorkTimeDeductions");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ModelData", b =>
                {
                    b.HasOne("ProductionPlanning.Models.ModelReference", "ModelReference")
                        .WithMany("ModelData")
                        .HasForeignKey("ModelReferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModelReference");
                });

            modelBuilder.Entity("ProductionPlanning.Models.OptimizedLineCapacity", b =>
                {
                    b.HasOne("ProductionPlanning.Models.LineConfiguration", "LineConfiguration")
                        .WithMany("OptimizedCapacities")
                        .HasForeignKey("LineConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LineConfiguration");
                });

            modelBuilder.Entity("ProductionPlanning.Models.OvertimeProductionAssignment", b =>
                {
                    b.HasOne("ProductionPlanning.Models.LineConfiguration", "LineConfiguration")
                        .WithMany("OvertimeProductionAssignments")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductionPlanning.Models.ModelData", "ModelData")
                        .WithMany("OvertimeProductionAssignments")
                        .HasForeignKey("ModelDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LineConfiguration");

                    b.Navigation("ModelData");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ProductionAssignment", b =>
                {
                    b.HasOne("ProductionPlanning.Models.LineConfiguration", "LineConfiguration")
                        .WithMany("ProductionAssignments")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProductionPlanning.Models.ModelData", "ModelData")
                        .WithMany("ProductionAssignments")
                        .HasForeignKey("ModelDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LineConfiguration");

                    b.Navigation("ModelData");
                });

            modelBuilder.Entity("ProductionPlanning.Models.WorkTimeDeduction", b =>
                {
                    b.HasOne("ProductionPlanning.Models.ShiftWorkConfiguration", "ShiftWorkConfiguration")
                        .WithMany("TimeDeductions")
                        .HasForeignKey("ShiftWorkConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftWorkConfiguration");
                });

            modelBuilder.Entity("ProductionPlanning.Models.LineConfiguration", b =>
                {
                    b.Navigation("OptimizedCapacities");

                    b.Navigation("OvertimeProductionAssignments");

                    b.Navigation("ProductionAssignments");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ModelData", b =>
                {
                    b.Navigation("OvertimeProductionAssignments");

                    b.Navigation("ProductionAssignments");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ModelReference", b =>
                {
                    b.Navigation("ModelData");
                });

            modelBuilder.Entity("ProductionPlanning.Models.ShiftWorkConfiguration", b =>
                {
                    b.Navigation("TimeDeductions");
                });
#pragma warning restore 612, 618
        }
    }
}
