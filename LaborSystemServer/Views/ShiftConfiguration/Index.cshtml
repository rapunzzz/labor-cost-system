@model List<LaborSystemServer.DTOs.ShiftConfigurationViewModel>
@{
    ViewData["Title"] = "Shift Configuration Management";
    var fridayPrayers = Model.SelectMany(m => m.TimeDeductions)
                              .Where(d => d.Name.Contains("Friday Prayer", StringComparison.OrdinalIgnoreCase))
                              .ToList();
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="fas fa-clock"></i> Shift Configuration Management</h2>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">
            <i class="fas fa-plus"></i> Add New Shift Configuration
        </button>
    </div>

    @if(TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if(TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle"></i> @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Shift Configurations -->
    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> No shift configurations found. Click "Add New Shift Configuration" to create one.
        </div>
    }
    else
    {
        <div class="row">
            @foreach(var config in Model)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card shadow-sm h-100">
                        <div class="card-header bg-primary text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="fas fa-business-time"></i> @config.WorkTypeName
                                </h5>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span class="text-muted">Start Time:</span>
                                    <strong>@config.StartTime.ToString(@"hh\:mm")</strong>
                                </div>
                                <div class="d-flex justify-content-between mt-2">
                                    <span class="text-muted">End Time:</span>
                                    <strong>@config.EndTime.ToString(@"hh\:mm")</strong>
                                </div>
                                <div class="d-flex justify-content-between mt-2">
                                    <span class="text-muted">Gross Time:</span>
                                    <strong class="text-primary">@config.GrossMinutes minutes</strong>
                                </div>
                            </div>

                            <hr>

                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="text-muted mb-0">
                                    <i class="fas fa-minus-circle"></i> Time Deductions 
                                    <span class="badge bg-info">@config.TimeDeductions.Count(d => !d.Name.Contains("Friday Prayer"))</span>
                                </h6>
                                <button type="button" class="btn btn-sm btn-success add-deduction-btn" 
                                        data-shift-id="@config.Id"
                                        data-shift-name="@config.WorkTypeName"
                                        data-shift-worktype="@((int)config.WorkType)"
                                        title="Add Time Deduction">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>

                            @{
                                var regularDeductions = config.TimeDeductions
                                    .Where(d => !d.Name.Contains("Friday Prayer", StringComparison.OrdinalIgnoreCase))
                                    .OrderBy(d => d.StartTime)
                                    .ToList();
                            }

                            @if (regularDeductions.Any())
                            {
                                <div class="deduction-list">
                                    @foreach(var deduction in regularDeductions)
                                    {
                                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 rounded @(deduction.IsActive ? "bg-light" : "bg-light opacity-50")">
                                            <div class="flex-grow-1">
                                                <div class="d-flex align-items-center gap-2">
                                                    <small class="fw-bold">@deduction.Name</small>
                                                    <button type="button" 
                                                        class="btn btn-sm toggle-deduction-btn"
                                                        data-id="@deduction.Id"
                                                        data-name="@deduction.Name"
                                                        data-isactive="@deduction.IsActive.ToString().ToLower()"
                                                        title="Toggle Active Status">
                                                    <i class="fas fa-circle @(deduction.IsActive ? "text-success" : "text-danger")"></i>
                                                </button>
                                                </div>
                                                <small class="text-muted">
                                                    @deduction.StartTime.ToString(@"hh\:mm") - @deduction.EndTime.ToString(@"hh\:mm")
                                                    (@deduction.DurationMinutes min)
                                                </small>
                                            </div>
                                            <div class="btn-group btn-group-sm">
                                                <button type="button" class="btn btn-sm btn-outline-primary edit-deduction-btn" 
                                                        data-id="@deduction.Id"
                                                        data-name="@deduction.Name"
                                                        data-starttime="@deduction.StartTime.ToString(@"hh\:mm")"
                                                        data-endtime="@deduction.EndTime.ToString(@"hh\:mm")"
                                                        data-shift-id="@config.Id"
                                                        data-worktype="@((int)config.WorkType)"
                                                        title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-danger delete-deduction-btn" 
                                                        data-id="@deduction.Id"
                                                        data-name="@deduction.Name"
                                                        data-shift-id="@config.Id"
                                                        title="Delete">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                    
                                    @* Friday Prayer Display *@
                                    @{
                                        var fridayPrayer = config.TimeDeductions
                                            .FirstOrDefault(d => d.Name.Contains("Friday Prayer", StringComparison.OrdinalIgnoreCase) && d.IsActive);
                                    }
                                    @if (fridayPrayer != null)
                                    {
                                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 rounded bg-warning bg-opacity-10 border border-warning">
                                            <div class="flex-grow-1">
                                                <small class="fw-bold text-warning">
                                                    <i class="fas fa-mosque"></i> @fridayPrayer.Name
                                                </small>
                                                <br>
                                                <small class="text-muted">
                                                    @fridayPrayer.StartTime.ToString(@"hh\:mm") - @fridayPrayer.EndTime.ToString(@"hh\:mm")
                                                    (@fridayPrayer.DurationMinutes min)
                                                </small>
                                            </div>
                                        </div>
                                    }
                                    
                                    <div class="d-flex justify-content-between mt-2 pt-2 border-top">
                                        <span class="text-muted">Total Deduction:</span>
                                        <strong class="text-danger">@config.TimeDeductions.Where(d => d.IsActive).Sum(d => d.DurationMinutes) minutes</strong>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <p class="text-muted small mb-0">No deductions configured. Click + to add.</p>
                            }

                            <hr>

                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="text-muted">Net Time (Senin - Kamis):</span>
                                    <h5 class="text-success mb-0">
                                        @(config.GrossMinutes - config.TimeDeductions
                                            .Where(d => d.IsActive && d.Name != "Friday Prayer")
                                            .Sum(d => d.DurationMinutes)) min
                                    </h5>
                                </div>

                                <div>
                                    <span class="text-muted">Net Time (Jumat):</span>
                                    <h5 class="text-success mb-0">@(config.GrossMinutes - config.TimeDeductions.Where(d => d.IsActive).Sum(d => d.DurationMinutes)) min</h5>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-white">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary edit-btn" 
                                        data-id="@config.Id"
                                        data-worktype="@((int)config.WorkType)"
                                        data-starttime="@config.StartTime.ToString(@"hh\:mm")"
                                        data-endtime="@config.EndTime.ToString(@"hh\:mm")">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger delete-btn" 
                                        data-id="@config.Id" data-name="@config.WorkTypeName">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Friday Prayer Configuration Section -->
    <div class="card shadow-sm mb-4 border-warning">
        <div class="card-header bg-warning text-dark">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-mosque"></i> Friday Prayer Configuration
                </h5>
                <button type="button" class="btn btn-sm btn-dark add-friday-prayer-btn" title="Add Friday Prayer">
                    <i class="fas fa-plus"></i> Add Friday Prayer
                </button>
            </div>
        </div>
        <div class="card-body">
            @if (fridayPrayers.Any())
            {
                <div class="row">
                    @foreach(var prayer in fridayPrayers)
                    {
                        var parentConfig = Model.First(m => m.TimeDeductions.Any(d => d.Id == prayer.Id));
                        <div class="col-md-6 mb-3">
                            <div class="card border-secondary">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2 @(prayer.IsActive ? "" : "opacity-50")">
                                        <div>
                                            <h6 class="mb-1">@parentConfig.WorkTypeName</h6>
                                            <small class="text-muted">
                                                @prayer.StartTime.ToString(@"hh\:mm") - @prayer.EndTime.ToString(@"hh\:mm")
                                                <span class="badge bg-info">@prayer.DurationMinutes min</span>
                                            </small>
                                        </div>
                                        <button type="button" 
                                                class="btn btn-sm toggle-deduction-btn"
                                                data-id="@prayer.Id"
                                                data-name="@prayer.Name"
                                                data-isactive="@prayer.IsActive.ToString().ToLower()"
                                                title="Toggle Active Status">
                                            <i class="fas fa-circle @(prayer.IsActive ? "text-success" : "text-danger")"></i>
                                        </button>

                                    </div>
                                    <div class="btn-group btn-group-sm w-100">
                                        <button type="button" class="btn btn-outline-primary edit-deduction-btn"
                                                data-id="@prayer.Id"
                                                data-name="@prayer.Name"
                                                data-starttime="@prayer.StartTime.ToString(@"hh\:mm")"
                                                data-endtime="@prayer.EndTime.ToString(@"hh\:mm")"
                                                data-shift-id="@parentConfig.Id"
                                                data-worktype="@((int)parentConfig.WorkType)">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button type="button" class="btn btn-outline-danger delete-deduction-btn"
                                                data-id="@prayer.Id"
                                                data-name="@prayer.Name"
                                                data-shift-id="@parentConfig.Id">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-muted mb-0">
                    <i class="fas fa-info-circle"></i> No Friday prayer configured. Click "Add Friday Prayer" to create one for specific work types.
                </p>
            }
        </div>
    </div>
</div>

<!-- Render Partial Views -->
@await Html.PartialAsync("_CreateModal")
@await Html.PartialAsync("_EditModal")
@await Html.PartialAsync("_AddDeductionModal")
@await Html.PartialAsync("_AddFridayPrayerModal")
@await Html.PartialAsync("_EditDeductionModal")

<!-- Delete Shift Configuration Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete shift configuration: <strong id="deleteConfigName"></strong>?</p>
                <p class="text-danger"><i class="fas fa-exclamation-triangle"></i> This will also delete all associated time deductions!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Deduction Modal -->
<div class="modal fade" id="deleteDeductionModal" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h6 class="modal-title">Delete Deduction</h6>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">Delete deduction: <strong id="deleteDeductionName"></strong>?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteDeductionForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteDeductionShiftId" name="shiftId" />
                    <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Toggle Deduction Active Modal -->
<div class="modal fade" id="toggleDeductionModal" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title">Toggle Deduction Status</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="mb-0">
                    <span id="toggleAction"></span> deduction: <strong id="toggleDeductionName"></strong>?
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="toggleDeductionForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-sm btn-primary">Confirm</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .deduction-list {
        max-height: 200px;
        overflow-y: auto;
    }
    .card {
        transition: transform 0.2s;
    }
    .add-deduction-btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }
    .toggle-deduction-btn {
        padding: 0.125rem 0.375rem;
        font-size: 0.7rem;
        border-radius: 0.25rem;
    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Add Friday Prayer
        document.querySelector('.add-friday-prayer-btn')?.addEventListener('click', function() {
        
            document.getElementById('DeductionFridayName').value = 'Friday Prayer';
            document.getElementById('DeductionFridayStartTime').value = '11:30';
            document.getElementById('DeductionFridayEndTime').value = '12:10';
            document.getElementById('DeductionFridayWorkType').value = '';
            document.getElementById('addDeductionModalLabel').textContent = 'Add Friday Prayer';
            
            new bootstrap.Modal(document.getElementById('addFridayPrayerModal')).show();
        });

        // Toggle Deduction Active Status with Modal
        document.querySelectorAll('.toggle-deduction-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.dataset.id;
                const name = this.dataset.name;
                const isActive = this.dataset.isactive === 'true';
                
                const action = isActive ? 'Deactivate' : 'Activate';
                document.getElementById('toggleAction').textContent = action;
                document.getElementById('toggleDeductionName').textContent = name;
                document.getElementById('toggleDeductionForm').action = `/ShiftConfiguration/ToggleDeductionActive/${id}`;
                
                new bootstrap.Modal(document.getElementById('toggleDeductionModal')).show();
            });
        });

        // Add Deduction Modal
        document.querySelectorAll('.add-deduction-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const shiftId = this.dataset.shiftId;
                const shiftName = this.dataset.shiftName;
                const workType = this.dataset.shiftWorktype;
                
                document.getElementById('DeductionShiftId').value = shiftId;
                document.getElementById('DeductionWorkType').value = workType;
                document.getElementById('DeductionName').value = '';
                document.getElementById('DeductionStartTime').value = '';
                document.getElementById('DeductionEndTime').value = '';
                document.getElementById('addDeductionModalLabel').textContent = `Add Deduction - ${shiftName}`;
                
                new bootstrap.Modal(document.getElementById('addDeductionModal')).show();
            });
        });

        // Edit Deduction Modal
        document.querySelectorAll('.edit-deduction-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.dataset.id;
                const name = this.dataset.name;
                const starttime = this.dataset.starttime;
                const endtime = this.dataset.endtime;
                const shiftId = this.dataset.shiftId;
                const workType = this.dataset.worktype;
                
                document.getElementById('EditDeductionId').value = id;
                document.getElementById('EditDeductionName').value = name;
                document.getElementById('EditDeductionStartTime').value = starttime;
                document.getElementById('EditDeductionEndTime').value = endtime;
                document.getElementById('EditDeductionShiftId').value = shiftId;
                document.getElementById('EditDeductionWorkType').value = workType;
                document.getElementById('editDeductionForm').action = `/ShiftConfiguration/EditDeduction/${id}`;
                
                new bootstrap.Modal(document.getElementById('editDeductionModal')).show();
            });
        });

        // Delete Deduction Modal
        document.querySelectorAll('.delete-deduction-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.dataset.id;
                const name = this.dataset.name;
                const shiftId = this.dataset.shiftId;
                
                document.getElementById('deleteDeductionName').textContent = name;
                document.getElementById('deleteDeductionShiftId').value = shiftId;
                document.getElementById('deleteDeductionForm').action = `/ShiftConfiguration/DeleteDeduction/${id}`;
                
                new bootstrap.Modal(document.getElementById('deleteDeductionModal')).show();
            });
        });

        // Edit Shift Modal
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.dataset.id;
                const worktype = this.dataset.worktype;
                const starttime = this.dataset.starttime;
                const endtime = this.dataset.endtime;
                
                document.getElementById('EditId').value = id;
                document.getElementById('EditWorkType').value = worktype;
                document.getElementById('EditStartTime').value = starttime;
                document.getElementById('EditEndTime').value = endtime;
                document.getElementById('editForm').action = `/ShiftConfiguration/Edit/${id}`;
                
                new bootstrap.Modal(document.getElementById('editModal')).show();
            });
        });

        // Delete Shift Modal
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.dataset.id;
                const name = this.dataset.name;
                
                document.getElementById('deleteConfigName').textContent = name;
                document.getElementById('deleteForm').action = `/ShiftConfiguration/Delete/${id}`;
                
                new bootstrap.Modal(document.getElementById('deleteModal')).show();
            });
        });

        // Auto-show create modal if there's an error
        @if (!string.IsNullOrEmpty(ViewBag.Error as string))
        {
            <text>
            document.addEventListener('DOMContentLoaded', function() {
                new bootstrap.Modal(document.getElementById('createModal')).show();
            });
            </text>
        }
    </script>
}