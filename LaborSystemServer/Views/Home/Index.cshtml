
@{
    ViewData["Title"] = "Upload Excel & Worker Planning";
}
<div class="container mt-4">
    <h2 class="mb-4">Upload Excel & Production Planning with Worker Optimization</h2>

    @if(!string.IsNullOrEmpty(ViewBag.Error as string))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error!</strong> @ViewBag.Error
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if(!string.IsNullOrEmpty(ViewBag.Success as string))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Success!</strong> @ViewBag.Success
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Upload Form -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="fas fa-upload"></i> Upload Excel File</h5>
        </div>
        <div class="card-body">
            <form asp-action="UploadExcel" method="post" enctype="multipart/form-data">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="month" class="form-label">Bulan</label>
                        <select name="month" id="month" class="form-select" required>
                            <option value="">-- Pilih Bulan --</option>
                            <option value="1">Jan</option>
                            <option value="2">Feb</option>
                            <option value="3">Mar</option>
                            <option value="4">Apr</option>
                            <option value="5">Mei</option>
                            <option value="6">Jun</option>
                            <option value="7">Jul</option>
                            <option value="8">Aug</option>
                            <option value="9">Sep</option>
                            <option value="10">Okt</option>
                            <option value="11">Nov</option>
                            <option value="12">Dec</option>
                        </select>
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="year" class="form-label">Tahun</label>
                        <input type="number" name="year" id="year" class="form-control" 
                               min="2000" max="2100" value="@DateTime.Now.Year" required />
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="file" class="form-label">File Excel</label>
                        <input type="file" name="file" id="file" 
                               class="form-control" accept=".xlsx,.xls" required />
                        <div class="form-text">Pilih file Excel (.xlsx atau .xls)</div>
                    </div>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="fas fa-cloud-upload-alt"></i> Upload & Generate Production Plan
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Excel Results Section - Updated for Multi-Shift -->
    @if(ViewBag.Results != null)
    {
        var results = ViewBag.Results.Data as List<ProductionPlanning.Models.ModelData>;
        var hariKerja = ViewBag.Results.HariKerja;
        
        // Calculate both NonShift and Multi-shift capacities
        double nonShiftRegularHours = ((hariKerja.TotalSeninKamis * 473) + (hariKerja.TotalJumat * 433)) / 60.0;
        double nonShiftTotalHours = (nonShiftRegularHours * 8);
        
        // Multi-shift calculations (existing)
        double shift1Hours = ((hariKerja.TotalSeninKamis * 458) + (hariKerja.TotalJumat * 418)) / 60.0;
        double shift2Hours = ((hariKerja.TotalSeninKamis + hariKerja.TotalJumat) * 398) / 60.0;
        double shift3Hours = ((hariKerja.TotalSeninKamis + hariKerja.TotalJumat) * 398) / 60.0;
        double totalHoursPerLineAllShifts = shift1Hours + shift2Hours + shift3Hours;
        double totalHoursAllLinesAllShifts = totalHoursPerLineAllShifts * 8;
        
        double totalDemandHours = results.Sum(r => r.TotalWorkHours);
        double capacityGapNonShift = nonShiftTotalHours - totalDemandHours;
        double capacityGapMultiShift = totalHoursAllLinesAllShifts - totalDemandHours;

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0"><i class="fas fa-table"></i> Hasil Upload Excel - @ViewBag.Results.Month.ToString("D2")/@ViewBag.Results.Year</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="card text-center bg-success text-white">
                            <div class="card-body">
                                <h6>NonShift Capacity</h6>
                                <h4>@nonShiftRegularHours.ToString("N2")</h4>
                                <small>@hariKerja.TotalSeninKamis days (473min) + @hariKerja.TotalJumat days (433min)</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center bg-primary text-white">
                            <div class="card-body">
                                <h6>Shift 1 Capacity</h6>
                                <h4>@shift1Hours.ToString("N2")</h4>
                                <small>@hariKerja.TotalSeninKamis days (458min) + @hariKerja.TotalJumat days (418min)</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center bg-secondary text-white">
                            <div class="card-body">
                                <h6>Shift 2 & 3 Capacity</h6>
                                <h4>@shift2Hours.ToString("N2")</h4>
                                <small>@(hariKerja.TotalSeninKamis + hariKerja.TotalJumat) days × 398min each</small>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="table-responsive">
                    <table class="table table-bordered table-hover align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>No</th>
                                <th>Model Name</th>
                                <th>Quantity</th>
                                <th>Total Hours (SUT × Qty)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int counter = 1;}
                            @foreach(var item in results)
                            {
                                <tr>
                                    <td>@counter</td>
                                    <td><strong>@item.ModelName</strong></td>
                                    <td class="text-end">@item.Quantity.ToString("N0")</td>
                                    <td class="text-end">@item.TotalWorkHours.ToString("N2")</td>
                                </tr>
                                counter++;
                            }
                        </tbody>
                    </table>
                </div>

                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="card border-primary">
                            <div class="card-header bg-primary text-white text-center">
                                <h6 class="mb-0">Method 1: NonShift + Overtime</h6>
                            </div>
                            <div class="card-body text-center">
                                <h5>@nonShiftTotalHours.ToString("N2") Hours</h5>
                                <small class="text-muted">
                                    Regular: @( (nonShiftRegularHours * 8).ToString("N2") )h
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card border-warning">
                            <div class="card-header bg-warning text-dark text-center">
                                <h6 class="mb-0">Method 2: Multi-Shift</h6>
                            </div>
                            <div class="card-body text-center">
                                <h5>@totalHoursAllLinesAllShifts.ToString("N2") Hours</h5>
                                <small class="text-muted">
                                    Shift1: @( (shift1Hours * 8).ToString("N2") )h + 
                                    Shift2: @( (shift2Hours * 8).ToString("N2") )h + 
                                    Shift3: @( (shift3Hours * 8).ToString("N2") )h
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Production Plan Results Section -->
    @if(ViewBag.ProductionPlan1 != null || ViewBag.ProductionPlan2 != null)
    {
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0"><i class="fas fa-industry"></i> Production Planning Results Comparison</h5>
            </div>
            <div class="card-body">
                <ul class="nav nav-tabs" id="productionPlanTabs" role="tablist">
                    @if(ViewBag.ProductionPlan1 != null)
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="nonshift-tab" data-bs-toggle="tab" data-bs-target="#nonshift-content" type="button" role="tab">
                                <i class="fas fa-clock"></i> NonShift + Overtime
                            </button>
                        </li>
                    }
                    @if(ViewBag.ProductionPlan2 != null)
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(ViewBag.ProductionPlan1 == null ? "active" : "")" id="multishift-tab" data-bs-toggle="tab" data-bs-target="#multishift-content" type="button" role="tab">
                                <i class="fas fa-users"></i> Multi-Shift
                            </button>
                        </li>
                    }
                </ul>

                <div class="tab-content mt-3" id="productionPlanTabsContent">
                    @if(ViewBag.ProductionPlan1 != null)
                    {
                        var plan1 = ViewBag.ProductionPlan1 as LaborSystemServer.Service.ProductionPlanResult;
                        <div class="tab-pane fade show active" id="nonshift-content" role="tabpanel">
                            @await Html.PartialAsync("_ProductionPlanPartial", plan1)
                        </div>
                    }
                    @if(ViewBag.ProductionPlan2 != null)
                    {
                        var plan2 = ViewBag.ProductionPlan2 as LaborSystemServer.Service.ProductionPlanResult;
                        <div class="tab-pane fade @(ViewBag.ProductionPlan1 == null ? "show active" : "")" id="multishift-content" role="tabpanel">
                            @await Html.PartialAsync("_ProductionPlanPartial", plan2)
                        </div>
                    }
                </div>
            </div>
        </div>

        @if(ViewBag.ProductionPlan1 != null && ViewBag.ProductionPlan2 != null)
        {
            var plan1 = ViewBag.ProductionPlan1 as LaborSystemServer.Service.ProductionPlanResult;
            var plan2 = ViewBag.ProductionPlan2 as LaborSystemServer.Service.ProductionPlanResult;
            
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0"><i class="fas fa-balance-scale"></i> Method Comparison Summary</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead class="table-primary">
                                        <tr>
                                            <th colspan="2" class="text-center">NonShift + Overtime</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Used Type</td>
                                            <td class="text-end">
                                                <strong>@(plan1.RequiredOvertimeHours > 0 ? "Non Shift & Overtime" : "Non Shift")</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Total Workers Required</td>
                                            <td class="text-end">
                                                @{
                                                    // Calculate using the same logic as Line-wise Worker Allocation Summary
                                                    var plan1LineGroups = plan1.Assignments.GroupBy(a => a.LineId);
                                                    var plan1TotalWorkers = 0;
                                                    foreach(var lg in plan1LineGroups)
                                                    {
                                                        var regularMaxWorkers = lg.Max(a => a.ActualAllocatedWorkers);
                                                        plan1TotalWorkers += regularMaxWorkers;
                                                    }
                                                }
                                                <strong>@plan1TotalWorkers</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Required Overtime Hours</td>
                                            <td class="text-end text-info"><strong>@plan1.RequiredOvertimeHours.ToString("N2")</strong> hours</td>
                                        </tr>
                                        @{
                                            var totalUsed = plan1.Assignments.Sum(a => a.PlannedHours + a.ChangeoverHours);
                                            var totalCapacityHours = plan1.TotalCapacityHours;
                                            var availableHours = totalCapacityHours - totalUsed;
                                        }

                                        @if (availableHours > 0 && plan1.RequiredOvertimeHours == 0)
                                        {
                                            <tr>
                                                <td>Idle Hours Available</td>
                                                <td class="text-end"><strong>@availableHours.ToString("N2")</strong> hours</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead class="table-warning">
                                        <tr>
                                            <th colspan="2" class="text-center">Multi-Shift</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Used Shifts</td>
                                            <td class="text-end">
                                                @{
                                                    var usedShifts = plan2.Assignments.GroupBy(a => a.AssignedShift).Select(g => g.Key).ToList();
                                                }
                                                <strong>@string.Join(", ", usedShifts)</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Total Workers Required</td>
                                            <td class="text-end">
                                                @{
                                                    // Calculate using the same logic as Line-wise Worker Allocation Summary
                                                    var plan2LineGroups = plan2.Assignments.GroupBy(a => a.LineId);
                                                    var plan2TotalWorkers = 0;
                                                    foreach(var lg in plan2LineGroups)
                                                    {
                                                        var shift1MaxWorkers = lg.Where(a => a.AssignedShift == ProductionPlanning.Models.WorkType.Shift1).Max(a => (int?)a.ActualAllocatedWorkers) ?? 0;
                                                        var shift2MaxWorkers = lg.Where(a => a.AssignedShift == ProductionPlanning.Models.WorkType.Shift2).Max(a => (int?)a.ActualAllocatedWorkers) ?? 0;
                                                        var shift3MaxWorkers = lg.Where(a => a.AssignedShift == ProductionPlanning.Models.WorkType.Shift3).Max(a => (int?)a.ActualAllocatedWorkers) ?? 0;
                                                        plan2TotalWorkers += shift1MaxWorkers + shift2MaxWorkers + shift3MaxWorkers;
                                                    }
                                                }
                                                <strong>@plan2TotalWorkers</strong>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Idle Hours Available</td>
                                            <td class="text-end text-muted">
                                                @{
                                                    // Get which shifts are actually being used (use different variable name)
                                                    var activeShifts = plan2.Assignments.GroupBy(a => a.AssignedShift).Select(g => g.Key).ToList();
                                                    
                                                    // Recalculate shift capacities (need access to HariKerja data)
                                                    var hariKerja = ViewBag.Results?.HariKerja;
                                                    var usedShiftCapacity = 0.0;
                                                    
                                                    if(hariKerja != null)
                                                    {
                                                        foreach(var shift in activeShifts)
                                                        {
                                                            double shiftCapacityPerLine = 0.0;
                                                            
                                                            if(shift == ProductionPlanning.Models.WorkType.Shift1)
                                                            {
                                                                shiftCapacityPerLine = ((hariKerja.TotalSeninKamis * 458) + (hariKerja.TotalJumat * 418)) / 60.0;
                                                            }
                                                            else if(shift == ProductionPlanning.Models.WorkType.Shift2)
                                                            {
                                                                shiftCapacityPerLine = ((hariKerja.TotalSeninKamis + hariKerja.TotalJumat) * 398) / 60.0;
                                                            }
                                                            else if(shift == ProductionPlanning.Models.WorkType.Shift3)
                                                            {
                                                                shiftCapacityPerLine = ((hariKerja.TotalSeninKamis + hariKerja.TotalJumat) * 398) / 60.0;
                                                            }
                                                            
                                                            usedShiftCapacity += shiftCapacityPerLine * 8; // multiply by 8 lines
                                                        }
                                                    }
                                                    
                                                    // Calculate hours used in those shifts only
                                                    var totalUsedHours = plan2.Assignments.Sum(a => a.PlannedHours + a.ChangeoverHours);

                                                    // Idle hours = capacity of used shifts - actual used hours
                                                    var idleHours = usedShiftCapacity - totalUsedHours;
                                                }
                                                <strong>@idleHours.ToString("N2")</strong> hours
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

</div>


<style>
    .card {
        border: none;
        border-radius: 10px;
    }
    
    .table th {
        border-top: none;
        font-weight: 600;
    }
    
    .badge {
        font-size: 0.75em;
    }
    
    .progress {
        border-radius: 15px;
    }
    
    .alert {
        border-radius: 10px;
    }

    .border-left-primary {
        border-left: 4px solid #007bff !important;
    }

    .fs-6 {
        font-size: 0.875rem;
    }
</style>